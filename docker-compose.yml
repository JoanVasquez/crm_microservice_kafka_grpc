services:
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes

  user-db:
    image: postgres:15
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data

  product-db:
    image: postgres:15
    environment:
      POSTGRES_DB: product_service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - product_db_data:/var/lib/postgresql/data

  order-db:
    image: postgres:15
    environment:
      POSTGRES_DB: order_service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data

  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=your-super-secure-jwt-secret-min-32-chars
      - REDIS_HOST=redis
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=50051
      - PRODUCT_SERVICE_HOST=product-service
      - PRODUCT_SERVICE_PORT=50052
      - ORDER_SERVICE_HOST=order-service
      - ORDER_SERVICE_PORT=50053
    depends_on:
      - redis
      - user-service
      - product-service

  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    ports:
      - "50051:50051"
    environment:
      - NODE_ENV=development
      - GRPC_PORT=50051
      - DB_HOST=user-db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=user_service_db
      - REDIS_HOST=redis
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=user_service_client
    depends_on:
      - user-db
      - redis
      - kafka

  product-service:
    build:
      context: .
      dockerfile: ./services/product-service/Dockerfile
    ports:
      - "50052:50052"
    environment:
      - NODE_ENV=development
      - GRPC_PORT=50052
      - DB_HOST=product-db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=product_service_db
      - REDIS_HOST=redis
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=product_service_client
      - KAFKA_GROUP_ID=product-service-group
    depends_on:
      - product-db
      - redis
      - kafka

  order-service:
      build:
        context: .
        dockerfile: ./services/order-service/Dockerfile
      ports:
        - "50053:50053"
      environment:
        - NODE_ENV=development
        - GRPC_PORT=50053
        - DB_HOST=order-db
        - DB_PORT=5432
        - DB_USERNAME=postgres
        - DB_PASSWORD=password
        - DB_NAME=order_service_db
        - REDIS_HOST=redis
        - REDIS_URL=redis://redis:6379
        - KAFKA_BROKERS=kafka:9092
      depends_on:
        - order-db
        - redis
        - kafka

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana

  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    user: root
    volumes:
      - ./monitoring/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - logstash

volumes:
  user_db_data:
  product_db_data:
  order_db_data:
  grafana_data:
  elasticsearch_data:
  kafka_data: